'use client';

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface Network {
  id: string;
  name: string;
  icon: string;
  chainId: number;
  rpc: string;
  color: string;
  tvl: string;
}

interface Transaction {
  id: string;
  from: string;
  to: string;
  amount: string;
  asset: string;
  status: 'pending' | 'completed' | 'failed';
  timestamp: string;
  fee: string;
}

export default function CrossChainBridgeUI() {
  const [activeTab, setActiveTab] = useState('bridge');
  const [loading, setLoading] = useState(true);
  const [fromNetwork, setFromNetwork] = useState('ethereum');
  const [toNetwork, setToNetwork] = useState('polygon');

  const networks: Network[] = [
    { id: 'ethereum', name: 'Ethereum', icon: '‚ü†', chainId: 1, rpc: 'mainnet', color: 'blue', tvl: '$2.1B' },
    { id: 'polygon', name: 'Polygon', icon: '‚¨¢', chainId: 137, rpc: 'polygon', color: 'purple', tvl: '$890M' },
    { id: 'arbitrum', name: 'Arbitrum', icon: 'üîµ', chainId: 42161, rpc: 'arbitrum', color: 'cyan', tvl: '$1.2B' },
    { id: 'optimism', name: 'Optimism', icon: 'üî¥', chainId: 10, rpc: 'optimism', color: 'red', tvl: '$650M' }
  ];

  const recentTransactions: Transaction[] = [
    {
      id: '1',
      from: 'Ethereum',
      to: 'Polygon',
      amount: '1.5',
      asset: 'ETH',
      status: 'completed',
      timestamp: '2 min ago',
      fee: '0.002 ETH'
    },
    {
      id: '2',
      from: 'Polygon',
      to: 'Arbitrum',
      amount: '2,500',
      asset: 'USDC',
      status: 'pending',
      timestamp: '5 min ago',
      fee: '0.1 MATIC'
    },
    {
      id: '3',
      from: 'Arbitrum',
      to: 'Ethereum',
      amount: '0.8',
      asset: 'WBTC',
      status: 'completed',
      timestamp: '15 min ago',
      fee: '0.001 ETH'
    }
  ];

  useEffect(() => {
    setTimeout(() => setLoading(false), 1500);
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-cyan-500 mx-auto mb-4"></div>
          <p className="text-white text-lg">Loading cross-chain bridge...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-cyan-950 to-slate-950">
      {/* Header */}
      <header className="border-b border-slate-700 bg-slate-900/50 backdrop-blur-sm">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-white">üåâ Cross-Chain Bridge</h1>
              <span className="text-sm text-slate-400">Generated by VibeForge</span>
            </div>
            <div className="flex items-center space-x-4">
              <a href="/" className="text-slate-400 hover:text-white transition-colors text-sm">
                ‚Üê Back to Generator
              </a>
              <button className="bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white px-6 py-2 rounded-lg font-medium transition-all transform hover:scale-105">
                Connect Wallet
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Network Stats */}
      <div className="bg-slate-800/30 border-b border-slate-700">
        <div className="container mx-auto px-6 py-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            {networks.map((network, index) => (
              <motion.div
                key={network.id}
                className="bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-xl p-6"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <div className="text-center">
                  <div className="flex items-center justify-center space-x-2 mb-2">
                    <span className="text-2xl">{network.icon}</span>
                    <h3 className="text-lg font-semibold text-white">{network.name}</h3>
                  </div>
                  <div className={`text-2xl font-bold text-${network.color}-400 mb-1`}>{network.tvl}</div>
                  <div className="text-xs text-slate-400">Total Value Locked</div>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-8">
        {/* Tabs */}
        <div className="flex space-x-1 bg-slate-800/50 rounded-xl p-1 mb-8 max-w-lg mx-auto">
          {['bridge', 'history', 'analytics'].map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`flex-1 py-3 px-4 rounded-lg text-sm font-medium transition-all capitalize ${
                activeTab === tab
                  ? 'bg-cyan-600 text-white'
                  : 'text-slate-400 hover:text-white'
              }`}
            >
              {tab}
            </button>
          ))}
        </div>

        {/* Content */}
        <AnimatePresence mode="wait">
          {activeTab === 'bridge' && (
            <motion.div
              key="bridge"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="max-w-2xl mx-auto"
            >
              <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-8">
                <h2 className="text-2xl font-bold text-white mb-8 text-center">üåâ Bridge Assets</h2>
                
                <div className="space-y-6">
                  {/* From Network */}
                  <div>
                    <label className="block text-sm text-slate-400 mb-3">From Network</label>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                      {networks.map((network) => (
                        <button
                          key={network.id}
                          onClick={() => setFromNetwork(network.id)}
                          className={`p-4 rounded-lg border transition-all ${
                            fromNetwork === network.id
                              ? `border-${network.color}-500 bg-${network.color}-500/10`
                              : 'border-slate-600 bg-slate-700/30 hover:border-slate-500'
                          }`}
                        >
                          <div className="text-center">
                            <div className="text-2xl mb-2">{network.icon}</div>
                            <div className="text-white font-medium text-sm">{network.name}</div>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Bridge Direction Indicator */}
                  <div className="flex justify-center">
                    <div className="bg-slate-700 rounded-full p-3">
                      <motion.div
                        animate={{ rotate: 180 }}
                        transition={{ duration: 0.3 }}
                        className="text-cyan-400 text-xl"
                      >
                        ‚¨á
                      </motion.div>
                    </div>
                  </div>

                  {/* To Network */}
                  <div>
                    <label className="block text-sm text-slate-400 mb-3">To Network</label>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                      {networks.map((network) => (
                        <button
                          key={network.id}
                          onClick={() => setToNetwork(network.id)}
                          className={`p-4 rounded-lg border transition-all ${
                            toNetwork === network.id
                              ? `border-${network.color}-500 bg-${network.color}-500/10`
                              : 'border-slate-600 bg-slate-700/30 hover:border-slate-500'
                          }`}
                        >
                          <div className="text-center">
                            <div className="text-2xl mb-2">{network.icon}</div>
                            <div className="text-white font-medium text-sm">{network.name}</div>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Asset Selection */}
                  <div>
                    <label className="block text-sm text-slate-400 mb-3">Select Asset</label>
                    <div className="grid grid-cols-3 gap-3">
                      {['ETH', 'USDC', 'WBTC'].map((asset) => (
                        <button
                          key={asset}
                          className="p-4 bg-slate-700/50 hover:bg-slate-700 border border-slate-600 rounded-lg transition-all"
                        >
                          <div className="text-center">
                            <div className="text-white font-bold">{asset}</div>
                            <div className="text-slate-400 text-sm">Balance: 2.5</div>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Amount Input */}
                  <div>
                    <label className="block text-sm text-slate-400 mb-3">Amount</label>
                    <div className="relative">
                      <input
                        type="text"
                        placeholder="0.0"
                        className="w-full bg-slate-700 border border-slate-600 rounded-lg px-4 py-4 text-white text-xl focus:ring-2 focus:ring-cyan-500"
                      />
                      <div className="absolute right-4 top-1/2 transform -translate-y-1/2 flex items-center space-x-2">
                        <span className="text-slate-400 text-sm">ETH</span>
                        <button className="text-cyan-400 text-sm hover:text-cyan-300">MAX</button>
                      </div>
                    </div>
                    <div className="flex justify-between mt-2 text-sm text-slate-400">
                      <span>‚âà $0.00</span>
                      <span>Available: 2.5 ETH</span>
                    </div>
                  </div>

                  {/* Bridge Info */}
                  <div className="bg-slate-700/30 rounded-lg p-4 space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span className="text-slate-400">Bridge Fee</span>
                      <span className="text-white">0.002 ETH (~$5.40)</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-slate-400">Estimated Time</span>
                      <span className="text-white">~10 minutes</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-slate-400">Route</span>
                      <span className="text-white">Canonical Bridge</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-slate-400">Security Level</span>
                      <span className="text-green-400">High ‚úì</span>
                    </div>
                  </div>

                  {/* Bridge Button */}
                  <button className="w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white py-4 rounded-lg font-medium transition-all transform hover:scale-105 text-lg">
                    üåâ Bridge Assets
                  </button>
                </div>
              </div>
            </motion.div>
          )}

          {activeTab === 'history' && (
            <motion.div
              key="history"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="max-w-4xl mx-auto"
            >
              <h2 className="text-2xl font-bold text-white mb-8 text-center">üìà Transaction History</h2>
              
              <div className="space-y-4">
                {recentTransactions.map((tx, index) => (
                  <motion.div
                    key={tx.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="bg-slate-800/50 border border-slate-700 rounded-xl p-6 hover:border-cyan-500/30 transition-all duration-300"
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className={`w-12 h-12 rounded-full flex items-center justify-center ${
                          tx.status === 'completed' ? 'bg-green-500/20 text-green-400' :
                          tx.status === 'pending' ? 'bg-yellow-500/20 text-yellow-400' :
                          'bg-red-500/20 text-red-400'
                        }`}>
                          {tx.status === 'completed' ? '‚úì' : 
                           tx.status === 'pending' ? '‚è≥' : '‚úó'}
                        </div>
                        <div>
                          <h3 className="text-white font-medium">
                            {tx.amount} {tx.asset}
                          </h3>
                          <p className="text-slate-400 text-sm">
                            {tx.from} ‚Üí {tx.to}
                          </p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={`font-medium capitalize ${
                          tx.status === 'completed' ? 'text-green-400' :
                          tx.status === 'pending' ? 'text-yellow-400' :
                          'text-red-400'
                        }`}>
                          {tx.status}
                        </div>
                        <div className="text-slate-400 text-sm">{tx.timestamp}</div>
                        <div className="text-slate-400 text-xs">Fee: {tx.fee}</div>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>

              <div className="mt-8 text-center">
                <button className="bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-6 py-3 rounded-lg font-medium">
                  Load More Transactions
                </button>
              </div>
            </motion.div>
          )}

          {activeTab === 'analytics' && (
            <motion.div
              key="analytics"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="max-w-6xl mx-auto"
            >
              <h2 className="text-2xl font-bold text-white mb-8 text-center">üìä Bridge Analytics</h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                {/* Volume Chart */}
                <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-6">
                  <h3 className="text-xl font-bold text-white mb-4">24h Volume by Network</h3>
                  <div className="space-y-4">
                    {networks.map((network, index) => (
                      <div key={network.id} className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <span className="text-xl">{network.icon}</span>
                          <span className="text-white font-medium">{network.name}</span>
                        </div>
                        <div className="flex-1 mx-4">
                          <div className="w-full bg-slate-700 rounded-full h-2">
                            <motion.div
                              className={`bg-gradient-to-r from-${network.color}-500 to-${network.color}-400 h-2 rounded-full`}
                              initial={{ width: 0 }}
                              animate={{ width: `${(index + 1) * 20}%` }}
                              transition={{ duration: 1, delay: index * 0.1 }}
                            />
                          </div>
                        </div>
                        <span className={`text-${network.color}-400 font-medium`}>
                          ${Math.floor(Math.random() * 1000)}M
                        </span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Top Assets */}
                <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-6">
                  <h3 className="text-xl font-bold text-white mb-4">Top Bridged Assets</h3>
                  <div className="space-y-4">
                    {[
                      { asset: 'ETH', volume: '$450M', change: '+12.5%' },
                      { asset: 'USDC', volume: '$320M', change: '+8.2%' },
                      { asset: 'WBTC', volume: '$180M', change: '-2.1%' },
                      { asset: 'USDT', volume: '$150M', change: '+15.7%' }
                    ].map((item, index) => (
                      <motion.div
                        key={item.asset}
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.1 }}
                        className="flex items-center justify-between p-3 bg-slate-700/30 rounded-lg"
                      >
                        <div className="flex items-center space-x-3">
                          <div className="w-8 h-8 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold text-sm">
                            {item.asset[0]}
                          </div>
                          <span className="text-white font-medium">{item.asset}</span>
                        </div>
                        <div className="text-right">
                          <div className="text-white font-medium">{item.volume}</div>
                          <div className={`text-sm ${
                            item.change.startsWith('+') ? 'text-green-400' : 'text-red-400'
                          }`}>
                            {item.change}
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Footer */}
      <footer className="border-t border-slate-800 bg-slate-900/30 backdrop-blur-xl mt-12">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between text-sm text-slate-400">
            <div>Built for ETH Dublin 2025 üáÆüá™</div>
            <div className="flex items-center space-x-4">
              <span>Cross-Chain Bridge</span>
              <span className="text-cyan-400">‚óè</span>
              <span>Powered by VibeForge</span>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
} 
